#!/usr/bin/env python3
#
# Copyright (c) 2016-2018, Neil Booth
#
# All rights reserved.
#
# See the file "LICENCE" for information about the copyright
# and warranty status of this software.

'''Script to send RPC commands to a running ElectrumX server.'''
import pandas as pd

import argparse
import asyncio
import json
import sys
from os import environ

from aiorpcx import timeout_after, connect_rs
import electrumx.lib.text as text

simple_commands = {
    'getinfo': 'Print a summary of server state',
    'groups': 'Print current session groups',
    'peers': 'Print information about peer servers for the same coin',
    'sessions': 'Print information about client sessions',
    'stop': 'Shut down the server cleanly',
}

session_commands = {
    'disconnect': 'Disconnect sessions',
    'log': 'Control logging of sessions',
}

other_commands = {
    'add_peer': (
        'add a peer to the peers list',
        [], {
            'type': str,
            'dest': 'real_name',
            'help': 'e.g. "a.domain.name s995 t"',
        },
    ),
    'daemon_url': (
        "replace the daemon's URL at run-time, and forecefully rotate "
        " to the first URL in the list",
        [], {
            'type': str,
            'nargs': '?',
            'default': '',
            'dest': 'daemon_url',
            'help': 'see documentation of DAEMON_URL envvar',
        },
    ),
    'query': (
        'query the UTXO and history databases',
        ['-l', '--limit'], {
            'type': int,
            'default': 1000,
            'help': 'UTXO and history output limit',
        }, ['items'], {
            'nargs': '+',
            'type': str,
            'help': 'hex scripts, or addresses, to query',
        },
    ),
    'reorg': (
        'simulate a chain reorganization',
        [], {
            'type': int,
            'dest': 'count',
            'default': 3,
            'help': 'number of blocks to back up'
        },
    ),
    'debug_memusage_list_all_objects': (
        'Print a table of types of most common types in memory',
        ['--limit'], {
            'type': int,
            'default': 50,
            'help': 'max number of types to return',
        },
    ),
    'debug_memusage_get_random_backref_chain': (
        'Return a dotfile as text containing the backref chain for a randomly selected object of type objtype',
        [], {
            'type': str,
            'dest': 'objtype',
            'help': 'e.g. "_asyncio.Task"',
        },
    ),
}


def main():
    # 读取文本文件
    with open('/data/scf/optimize/atomicals-electrumx/a.txt', 'r') as file:
        lines = file.readlines()

    # 提取数据
    data = []
    for line in lines:
        parts = line.strip().split()
        row = {}
        for part in parts:
            # 检查是否包含 '='
            if '=' in part:
                key, value = part.split('=')
                # 检查是否是日期时间字符串
                if key == 'ts':
                    continue
                else:
                    value = float(value) if '.' in value else int(value)
                row[key] = value
        data.append(row)

    # 创建DataFrame
    df = pd.DataFrame(data)
    df.to_excel('output.xlsx', index=False)


if __name__ == '__main__':
    main()
